#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{url}
\end_preamble
\use_default_options false
\language american
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 0.5cm
\footskip 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
PXL
\end_layout

\begin_layout Standard
For handling a physics analysis the Physics eXtension Library (PXL)
\begin_inset CommandInset citation
LatexCommand cite
key "PXL"

\end_inset

 will be used as a core component for easily handling the analysis itself.
 PXL is a class collection, which is written in C++ with only a few dependencies
 like zlib
\begin_inset CommandInset citation
LatexCommand cite
key "zlib"

\end_inset

 and expad
\begin_inset CommandInset citation
LatexCommand cite
key "expad"

\end_inset

.
 Therefore, a analysis with the use of PXL classes and structures runs satisfact
ory fast.
 It supports the creation of physics analysis for HEP and astroparticle
 physics with all necessary data objects and relations.
 I used PXL 3.0, which has the following main features and is divided into
 the packages:
\end_layout

\begin_layout Itemize
core: This package includes all general handling for input, output and the
 basic event (pxl::Event) with simple relations.
 It contains also a class for quick performing of four-vector analysis.
 A specialty of PXL is that the user can attach what ever information (so-called
 user records) he likes to many PXL objects such as a event.
\end_layout

\begin_layout Itemize
modules: To create a PXL analysis a own class (pxl::Analysis) is provided
 for modeling and running an analysis.
 A analysis consists of modules which are connected to each other an added
 to the analysis class.
 This package contains some standard modules like the pxl::InputModule,
 pxl::OutputModule and the pxl::PyAnalyseModule, but the user is also total
 free to write and use his own C++ modules.
\end_layout

\begin_layout Itemize
hep: For HEP there is a particle class (pxl::Particle).
 A particle object is able to contain all standard information like energy,
 momentum, pseudo rapidity and charge.
 In addition, the user can also attach more information through user records
 like spin.
 A main feature is that in this package it is possible to define different
 views (pxl::EventView) to the same event.
 In a Monte-Carlo simulation this can be a generator view (what event was
 generated) and a reconstructed view (after the event passed the detector
 simulation).
\end_layout

\begin_layout Itemize
astro: For astroparticle physics PXL has a comic ray class (pxl::UHECR).
\end_layout

\begin_layout Itemize
algorithms: In this package, all algorithms are maintained.
 For example, there is a PXL module for automatically reconstructing decay
 trees by only entering a steering file (pxl::AutoProcessModule).
 This uses the pxl::AutoProcess algorithm.
 Another very important algorithm is the pxl::AutoLayouter.
 It can be used to automatically layout a given graph, which consists of
 pxl::Node objects with relations between them.
 A common use is to layout decay trees in a HEP event with this algorithms.
 More information, how the algorithm works can be found in Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Geros_dipl"

\end_inset

.
\end_layout

\begin_layout Standard
The course for building a physics analysis with PXL is defined over the
 modules in the analysis class.
 Each module can have different input and output ports, which create by
 connecting them to other module's inputs and outputs a analysis flow.
 During a running analysis, PXL events will travel along these connections
 to the different modules for further analysis.
\end_layout

\begin_layout Standard
A module's behavior can be controlled by specifying its configuration options.
 A option can be for example the available ports.
 For steering a module the user can write a python script.
\end_layout

\begin_layout Standard
If a user is not interested in creating his own C++ modules for PXL and
 do not want to install a C++ compiler, there is a Python wrapped version
 of PXL called PyPXL.
 Is is created by using the swig software tool.
 For more information, about swig and how it can be used see Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "swig"

\end_inset

.
 The user can write his analysis in Python code by have still nearly the
 performance of C++.
 This concept becomes even more attractive by using besides PyPXL also PyROOT
 for plotting
\begin_inset CommandInset citation
LatexCommand cite
key "ROOT"

\end_inset

.
\end_layout

\begin_layout Standard
Another feature of PXL is the ability to save the pxl::Analysis in a single
 xml file.
 The standard saved information are only the used modules, their option's
 values and the connections among them.
 For additional information, it is possible to add user records to each
 module and to the analysis class as well.
 Such information can be the author's name of the analysis or the compilation
 date of a module.
 It is also possible to load a pxl::Analysis from a created xml file.
 To execute an analysis as a batch job, PXL delivers also the pxlrun program
 that needs only such a xml file as argument to run the former created analysis
 instantainously.
\end_layout

\begin_layout Standard
In conclusion, the PXL class collection is well suited as a core component
 for physics analysis because of its fast C++ code, its easy use in Python
 and the clearly representation of the analysis flow.
 
\end_layout

\begin_layout Section
Vispa
\end_layout

\begin_layout Standard
The Visual Physics Analysis (Vispa)
\begin_inset CommandInset citation
LatexCommand cite
key "Vispa,andreas_acat"

\end_inset

 program is a graphical development enviroment for designing physics analysis.
 It is programmed in Python and uses PXL as an underlying analysis framework.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/vispa_logo.eps
	lyxscale 50
	scale 13

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vispa logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the main window of Vispa, the abstract PXL modules become now visible.
 An example analysis is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Vispa:-Creating-an"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/vispa example.eps
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vispa: Creating an analysis
\begin_inset CommandInset label
LatexCommand label
name "fig:Vispa:-Creating-an"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the left, there are all available C++ and Python modules listed.
 Per drag and drop, the modules can be moved into the main panel.
 Here, the dropped module will be created and drawn with its ports.
 By selecting a module, its configuration options are displayed and can
 be edit in the right panel.
 Connections can also simply made by dragging a port over another.
 To edit a steering file of a module, only a double click on it opens your
 standard data editor for its extension.
 If you double click instead on a input or output module it opens a further
 feature of Vispa, the data browser.
 An example is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Vispa:-Event-viewing"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/vispa eventview.png
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vispa: Event viewing with the data browser
\begin_inset CommandInset label
LatexCommand label
name "fig:Vispa:-Event-viewing"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is an example of Monte-Carlo dataset with two different event views,
 Generator and Reconstructed, of the same event.
 If the user selects a particle, its properties are displayed in the right
 property panel.
 Furthermore, the pxl::AutoLayouter algorithm has been filled with the mother-da
ughter relations of the particles to draw the decay tree in the middle panel.
\end_layout

\begin_layout Standard
Another feature of Vispa is the ability to save a created analysis in an
 xml file like PXL.
 This makes a physics analysis, which is created with Vispa, simply exchangeable
 and distributable among a team of physics, who are working on the same
 analysis or depending on each other's analysis for example.
\end_layout

\begin_layout Standard
To sum up, Vispa shows a desired graphical implementation of a physics analysis
 development enviroment with all its advantages that comes with the underlying
 PXL framework and extends it with features like the event viewing with
 the data browser.
\end_layout

\begin_layout Section
Combining with Web 2.0 technologies
\end_layout

\begin_layout Standard
The implementation of the Vispa enviroment to perform a PXL analysis is
 not limited to a stand-alone application.
 The new technologies that the Web 2.0 provides has been considered to be
 useful as a next step in physics analysis.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifnum
\backslash
value{chapter}<1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fi
\end_layout

\end_inset


\end_layout

\end_body
\end_document
