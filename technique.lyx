#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{url}
\end_preamble
\use_default_options false
\language american
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 0.5cm
\footskip 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
PXL
\end_layout

\begin_layout Standard
The Physics eXtension Library (PXL)
\begin_inset CommandInset citation
LatexCommand cite
key "PXL"

\end_inset

 will be used as a core component for easy handling the analysis itself.
 PXL is a class collection which is written in C++ with only a few dependencies
 like zlib
\begin_inset CommandInset citation
LatexCommand cite
key "zlib"

\end_inset

 and expat
\begin_inset CommandInset citation
LatexCommand cite
key "expat"

\end_inset

.
 It supports the creation of physics analysis for HEP and astroparticle
 physics with all necessary data objects.
 Between these objects it is also possible to create different types of
 relations, e.g.
 mother-daughter relations between particles to store decay trees.
 I used PXL 3.0 which has the following main features and is divided into
 these packages:
\end_layout

\begin_layout Itemize
core: This package includes classes for input, output and a basic event
 class (
\family typewriter
\size footnotesize
pxl::Event
\family default
\size default
) which provides access and handling of the data.
 The core contains also a class for four-vector analysis (
\family typewriter
\size footnotesize
pxl::LorentzVector
\family default
\size default
).
 A specialty of PXL is that the user can attach additional analysis specific
 information (so-called user records) to PXL classes like the 
\family typewriter
\size footnotesize
pxl::Event
\family default
\size default
.
\end_layout

\begin_layout Itemize
modules: The 
\family typewriter
\size footnotesize
pxl::Analysis
\family default
\size default
 class is provided for modeling and running an analysis which consist of
 modules that are connected to each other.
 This package includes some standard modules like the 
\family typewriter
\size footnotesize
pxl::InputModule
\family default
\size default
, 
\family typewriter
\size footnotesize
pxl::OutputModule
\family default
\size default
 and the 
\family typewriter
\size footnotesize
pxl::PyAnalyseModule
\family default
\size default
.
 These modules are supplying the logic of the physics analysis and thus
 improves its clarity.
 The actual analysis code is packed into the modules by a Python script
 but the user is also entirely free to write and use his self-written C++
 modules.
\end_layout

\begin_layout Itemize
hep: For HEP there is a particle class (
\family typewriter
\size footnotesize
pxl::Particle
\family default
\size default
).
 A particle object is able to contain all standard information like energy,
 momentum, pseudo rapidity and charge.
 In addition, the user can also attach more information through user records.
 A main feature is that in this package it is possible to define different
 views (
\family typewriter
\size footnotesize
pxl::EventView
\family default
\size default
) of the same event.
 In a Monte-Carlo simulation this can be a 'generator' view, e.g.
 what event was generated, and a 'reconstructed' view, e.g.
 the event after it passed the detector simulation.
\end_layout

\begin_layout Itemize
astro: For astroparticle physics, PXL provides support for astroparticle
 physics analysis.
 Amongst others, there is a cosmic ray class (
\family typewriter
\size footnotesize
pxl::UHECR
\family default
\size default
) which can be connected to a source (pxl::UHECRSource).
 Furthermore, the 
\family typewriter
\size footnotesize
pxl::CoordinateTransformations
\family default
\size default
 class can be used to transformation between astronomical coordinate systems.
\end_layout

\begin_layout Itemize
algorithms: This package contains some algorithms for HEP and astroparticle
 analysis.
 For example, there is a algorithm for automatic decay tree reconstructing
 by presetting a steering file (
\family typewriter
\size footnotesize
pxl::AutoProcess
\family default
\size default
).
 Another very useful algorithm is the 
\family typewriter
\size footnotesize
pxl::AutoLayouter
\family default
\size default
.
 The common use is the layouting of decay trees in a HEP event with this
 algorithm.
 For more information and how the algorithm works can be found in Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Geros_dipl"

\end_inset

.
\end_layout

\begin_layout Standard
The course for building a physics analysis with PXL is defined by the modules
 in the analysis class.
 Each module can have different sinks and output sources which when being
 connected with other moduleÂ´s sinks and sources, create an analysis flow.
 During a running analysis, PXL events are passed along these connections
 to the different modules for analysis.
\end_layout

\begin_layout Standard
A module's logic can be controlled by specifying its configuration options.
 This can be for example the path of an input file or a Python script.
 The use of the programming language Python has the advantage that it is
 much easier to learn than C++.
\end_layout

\begin_layout Standard
If the user is not interested in creating his own C++ modules for PXL nor
 does not want to install a C++ compiler, there is a Python wrapped version
 of PXL called PyPXL.
 It gets created by using the SWIG software tool.
 For more information, about SWIG and how it can be used see Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "swig"

\end_inset

.
 The user can write his analysis in Python code but nevertheless benefits
 from the underlying performance of C++ in intensive computing program sections
 like IO.
 This concept becomes even more attractive when also using PyROOT besides
 PxPXL for plotting and histogramming
\begin_inset CommandInset citation
LatexCommand cite
key "ROOT"

\end_inset

.
\end_layout

\begin_layout Standard
Another feature of PXL is its ability to save the 
\family typewriter
\size footnotesize
pxl::Analysis
\family default
\size default
 in a single XML file.
 In general, the information that gets saved is only the used modules, their
 option's values and the connections among them.
 For additional information, it is possible to add user records to each
 module and to the analysis class, too.
 Such information can be the author's name of the analysis or the compilation
 date of a module.
 It is also possible to load a 
\family typewriter
\size footnotesize
pxl::Analysis
\family default
\size default
 from a created XML file.
 To execute an analysis as a batch job, PXL delivers the pxlrun program
 which only needs such a XML file to run the formerly created analysis.
\end_layout

\begin_layout Standard
In conclusion, the PXL class collection is well suited as a core component
 for physics analysis because of its fast C++ code, its easy usage in Python
 and the clear representation of the analysis logic by the modules.
 
\end_layout

\begin_layout Section
Vispa
\end_layout

\begin_layout Standard
The Visual Physics Analysis (Vispa)
\begin_inset CommandInset citation
LatexCommand cite
key "Vispa,andreas_acat"

\end_inset

 program is a graphical development environment for designing physics analysis.
 It is programmed in Python and uses PXL as an underlying analysis framework.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/vispa_logo.eps
	lyxscale 50
	scale 13

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vispa logo
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the main window of Vispa, the abstract PXL modules become now visible.
 A sample analysis is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Vispa:-Creating-an"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/vispa example.eps
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vispa: Creating an analysis
\begin_inset CommandInset label
LatexCommand label
name "fig:Vispa:-Creating-an"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the left, there are all available C++ and Python modules listed.
 Per drag and drop, the modules can be moved into the main panel.
 Here, the dropped module will be created and drawn with its sinks and sources.
 By selecting a module, its configuration options are displayed and can
 be edited in the right panel.
 Connections can simply be made by dragging a source over a sink or vice
 versa.
 To edit a Python analysis script of a module, a simple double click opens
 your standard data editor for Python scripts.
 If you double click on an input or output module instead, it opens the
 data browser, a further feature of Vispa.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/vispa eventview.png
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vispa: Event viewing with the data browser
\begin_inset CommandInset label
LatexCommand label
name "fig:Vispa:-Event-viewing"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Vispa:-Event-viewing"

\end_inset

 shows the data browser with an event which is an example of a Monte-Carlo
 data set with two different event views, 'Generator' and 'Reconstructed',
 of the same event.
 If the user selects a particle, its properties are displayed in the property
 panel on the right.
 Furthermore, the 
\family typewriter
\size footnotesize
pxl::AutoLayouter
\family default
\size default
 algorithm has been used to draw the decay tree in the middle panel.
\end_layout

\begin_layout Standard
Another feature of Vispa is its ability to save a designed analysis in a
 XML file.
 This makes a physics analysis easily exchangeable and distributable among
 teams of physicists, who are working on the same analysis or have interdependen
t analyses.
\end_layout

\begin_layout Standard
To sum it up, Vispa shows a desired graphical implementation of a physics
 analysis development environment with all its advantages that come with
 the underlying PXL framework and extends it with GUI components like the
 event viewing with the data browser.
\end_layout

\begin_layout Section
Combining with Web 2.0 technologies
\end_layout

\begin_layout Standard
An implementation like the Vispa environment to perform a PXL analysis is
 not limited to a stand-alone application.
 The new technologies that are associated with the Web 2.0 have been taken
 under consideration and proven to be useful as a next step in development
 of physics analysis.
 The task is to create a development environment for PXL physics analyses,
 which consists of a front-end in a web-browser but its underlying analysis
 is stored and executed on a server.
 I choose to program the web server in Python for easy access to the analysis
 with PyPXL and Java Script (JS) on the client because it is the most supported
 language in the major web browsers.
 Alternative technologies besides Java Script, might be Java applet
\begin_inset CommandInset citation
LatexCommand cite
key "javaapplets"

\end_inset

, Flash
\begin_inset CommandInset citation
LatexCommand cite
key "flash"

\end_inset

 or Silverlight
\begin_inset CommandInset citation
LatexCommand cite
key "silverlight"

\end_inset

.
\end_layout

\begin_layout Standard
For the GUI, the following JS libraries were used:
\end_layout

\begin_layout Itemize
'Draw 2d': This library provides a special canvas, a workflow, on which
 HTML elements can be positioned, moved and resized.
 In addition, it contains necessary classes which can be used for drawing
 UML diagrams or mind maps
\begin_inset CommandInset citation
LatexCommand cite
key "draw2d"

\end_inset

.
 It depends on the Java Script 'VectorGraphics' library.
\end_layout

\begin_layout Itemize
Java Script 'VectorGraphics': This package wraps around the canvas object,
 which is specified in in HTML 5.0
\begin_inset CommandInset citation
LatexCommand cite
key "html5"

\end_inset

.
 It is used for drawing vector graphics like lines, polygons and circles
 with different stroke styles and colors.
 
\begin_inset CommandInset citation
LatexCommand cite
key "wzjsgraphics"

\end_inset


\end_layout

\begin_layout Itemize
'Ext JS': It is an entirely JS based framework, which provides GUI components
 like text fields, buttons, menus, trees and grids in an object oriented
 structure.
 Thus, it is highly flexible and extensible.
 Furthermore, there is support for managing data objects like data stores
 or component layouters.
 I have used the version Ext JS 3.2.
\begin_inset CommandInset citation
LatexCommand cite
key "Extjs"

\end_inset


\end_layout

\begin_layout Itemize
'MooTools': This is a framework which defines new convenient functions to
 JS.
 For example, the '$' operator is introduced to access HTML components via
 the DOM structure of a website by its id.
 
\begin_inset CommandInset citation
LatexCommand cite
key "mootools"

\end_inset


\end_layout

\begin_layout Standard
For communication between client and web server, I used the Java Script
 Object Notation (JSON)
\begin_inset CommandInset citation
LatexCommand cite
key "JSON"

\end_inset

 format because it is a human readable and easy writable data exchange format.
 JSON itself is capable of storing primitive data types like strings, numbers
 and booleans into the two data structures: arrays and objects.
 JSON objects are defined by key and value pairs.
 Other formats are XML or Jamal
\begin_inset CommandInset citation
LatexCommand cite
key "jamal"

\end_inset

.
\end_layout

\begin_layout Standard
Communication will be asynchronously via a POST request which is send to
 the sever via HTTP.
 Then the server sends a response to the request back to the client.
 This concept of communication is commonly associated as a part of 
\begin_inset Quotes eld
\end_inset

Asynchronous Java Script and XML (AJAX)
\begin_inset Quotes erd
\end_inset

.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-difference-between"

\end_inset

 clarifies this in comparison to traditional synchronously applications.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/ajax-fig1.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The difference between traditional and AJAX applications 
\begin_inset CommandInset label
LatexCommand label
name "fig:The-difference-between"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center

\size footnotesize
The figure was taken from Ref.
 
\begin_inset CommandInset citation
LatexCommand cite
key "ajax"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A JS script on the client can send a request via the AJAX engine to the
 server.
 The server will now progress the request while the client has not to wait
 for a response.
 If the client has specified a function within the request, which to be
 call after a successful response, the AJAX engine will take care of it.
\end_layout

\begin_layout Standard
These are the technologies which will serve the creation of a development
 environment for physics analysis as a web application.
 The project is called 'VISPA@web'.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifnum
\backslash
value{chapter}<1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "amsplain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fi
\end_layout

\end_inset


\end_layout

\end_body
\end_document
