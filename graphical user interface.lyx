#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{url}
\end_preamble
\use_default_options false
\language american
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 0.5cm
\footskip 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Module Handling
\end_layout

\begin_layout Standard
The modules are managed by using the Draw 2d library.
 A GUI class was implemented to override some of the draw2d.Node class methods
 and to insert a own HTML representation.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Overview-of-all"

\end_inset

 shows all modules and how they look like with this class.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/module overview.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Overview of all standard available modules
\begin_inset CommandInset label
LatexCommand label
name "fig:Overview-of-all"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To establish a connection from a module to another, Sinks and Sources are
 added to them due to the module's description.
 The Sink and Source classes are inherited from the draw2d.Port to react
 on the user, if they are dropped on each other.
 Then a connection request is sent to the server with the two module's and
 port's names.
\end_layout

\begin_layout Standard
An example of a created analysis is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-sample-analysis"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/sample analysis1.png
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A sample analysis
\begin_inset CommandInset label
LatexCommand label
name "fig:A-sample-analysis"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main goal of the GUI implementation was to adapt the Vispa layout and
 handling into the web-browser.
 Here, the Ext JS library has the necessary GUI components to satisfy even
 the complex requirements like a tab panel under the menu or the module's
 options editor with a property grid on the right.
\end_layout

\begin_layout Section
Filebrowsing
\end_layout

\begin_layout Standard
For security reason, the user should be restricted to perform his analysis
 only in a own directory.
 Also, the user should not see the real file-system structure.
 Therefore, created a file-system between the client and server which will
 manage the user's files and displays only specified file extensions.
 The underlying security concept was not to implement restrictions but rather
 implement only what the user is allowed to do.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Filesystem"

\end_inset

 demonstrates an example how the file-system works.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/filesys.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The File-system
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Filesystem"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Consider a user who likes to set the file path for a Python steering file
 of a module which is located on the server, e.g.
 
\family typewriter
\size footnotesize
'user/test.py'
\family default
\size default
.
 The client will process a request to the server to set the given file path.
 This file path will be translated to the real file system path on the server
 and applied to the specified module, e.g.

\family typewriter
\size footnotesize
 'C:/work/test.py'
\family default
\size default
.
 The client tries then to display the new module's options and gets the
 retranslated file path back from the server again through the file-system,
 e.g.
 
\family typewriter
\size footnotesize
'user/test.py'
\family default
\size default
.
 Another advantage of this concept is that it can be simply adjusted to
 different operation systems or file system environments.
\end_layout

\begin_layout Standard
To display the file system to the user, I programed a file browser which
 is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Filebrowser"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/filebrowser.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The File-browser
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Filebrowser"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, the user can organize his files on the server.
 It is even possible to download or upload
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It is possible to restrict the allowed uploadable file size.
 
\end_layout

\end_inset

 a Python file.
 If a group of users like to work with the same data set, the file system
 differs between a user specific and a additional global folder which is
 visible to all other users as well.
 For further access to the data, the user can import files from the global
 folder to his own.
 The implementation is also flexible for adaption for adding other import
 directories.
 The GUI of the importer is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Importer"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/importer.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Importer
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Importer"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The files can be chosen from the left via the 'add' button and then automaticall
y copied in sequence by pushing the 'start import' button.
\end_layout

\begin_layout Section
The Event View
\end_layout

\begin_layout Standard
In similar manner like Vispa, I used also the pxl::AutoLayouter to display
 decay tree in an event view like in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Event-view"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/eventview.png
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Event view
\begin_inset CommandInset label
LatexCommand label
name "fig:Event-view"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the left side is a overview of all event views and its particle of the
 current event.
 The position of the event in the file is displayed above it and can be
 switch forward or backward to show the next or previous event.
 The right panel displays the properties and user records of the selected
 particle, event view or of the hole event.
 The shown information are actual the arrays of name and value pairs of
 the PxlIOReader class interchange format.
\end_layout

\begin_layout Standard
To draw the connection lines, the Java-Script VectorGraphics library was
 used.
 I also implement a lightweight server-side ParticleLine class to use the
 pxl::AutoLayouter.
 This class is initialized with two nodes according to the mother-daughter
 relations between the particles.
 If a particle has no mother and daughter relation, the line of the particle
 is adjusted horizontally and in sequence to other particle lines like the
 'Reconstructed' event view in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Event-view"

\end_inset

.
\end_layout

\begin_layout Standard
After the pxl::AutoLayouter has been executed, the end-positions of the
 connections are also included in the PxlIOReader format and transmitted
 with the other data of the event to the client.
\end_layout

\begin_layout Section
The Code Editor
\end_layout

\begin_layout Standard
Unlike Vispa, the use can edit Python script directly inside the web-browser.
 The code editor, EditArea
\begin_inset CommandInset citation
LatexCommand cite
key "EditArea"

\end_inset

, was therefore integrated into the GUI.
 It supports syntax highlighting and interacts with the file browser to
 open or save a file.
 It is also possible to undo a modification or change the size of the displayed
 code.
 It is left to the user, if he uses this feature or download the Python
 scripts and edit them with his own editor.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-code-editor:"

\end_inset

 visualizes the integration of the editor inside the Ext JS layout.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/editor.png
	lyxscale 50
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The code editor: EditArea
\begin_inset CommandInset label
LatexCommand label
name "fig:The-code-editor:"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To summarize, the main layout and handling of Vispa could well be transferred
 into a web-browser.
 It was even possible to adapt complex features like the event view.
 In addition, for working with the server's file system, a file browser
 and importer was designed and implemented.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifnum
\backslash
value{chapter}<1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fi
\end_layout

\end_inset


\end_layout

\end_body
\end_document
