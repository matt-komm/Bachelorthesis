#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{url}
\end_preamble
\use_default_options false
\language american
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 0.5cm
\footskip 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Module Handling
\end_layout

\begin_layout Standard
The modules are managed by using the 'Draw 2d' library.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Overview-of-all"

\end_inset

 shows all modules and how they look like.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/module overview.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Overview of all default available PXL modules
\begin_inset CommandInset label
LatexCommand label
name "fig:Overview-of-all"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A module can be created by drag and drop, selected, moved or erased on the
 provided work flow by the library.
 To establish a connection from a module to another, Sinks and Sources are
 added to them based on the module's description.
 The Sink and Source classes inherit from the 
\family typewriter
\size footnotesize
draw2d.Port
\family default
\size default
 to react on the user, if they are dropped on each other.
 Then a connection request is sent to the server with the two module's and
 port's names.
\end_layout

\begin_layout Standard
An example of a created analysis is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-sample-analysis"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/sample analysis.eps
	lyxscale 50
	scale 44

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A sample analysis
\begin_inset CommandInset label
LatexCommand label
name "fig:A-sample-analysis"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main goal of the client's implementation was to adopt the Vispa layout
 and handling into the web browser.
 Here, the 'Ext JS' library provides the necessary graphical components
 to satisfy even the more complex requirements like a tab panel under the
 menu or the module's options editor with a property grid on the right.
\end_layout

\begin_layout Section
File browsing
\end_layout

\begin_layout Standard
For security reason, the user should be restricted to perform his analysis
 only in his own directory.
 Also, the user should not see the real file system structure.
 Therefore, I created a virtual file system manager between the client and
 server which will manage the user's files and displays only specified file
 extensions.
 The underlying security concept was not to implement complex rules what
 the user is forbidden.
 It is oriented to allow only what the user should do or see.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Filesystem"

\end_inset

 demonstrates an example how the file system works.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/filesys.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The File-system: Setting and Getting a Python file path
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Filesystem"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Consider a user who likes to set the path to a Python script file which
 is located on the server.
 The client will send a request to the server to set the given file path
 (1), e.g.
 the virtual path 
\family typewriter
\size footnotesize
'user/test.py'
\family default
\size default
.
 This file path will be translated to the real file system path on the server,
 e.g.
 to
\family typewriter
\size footnotesize
 'C:/work/test.py'
\family default
\size default
 (2), and then applied to a specified module (3).
 The client displays the virtual set path correctly because the real path
 is retranslated back again through the virtual file system (4), in this
 case to 
\family typewriter
\size footnotesize
'user/test.py'
\family default
\size default
.
 Therefore, the client has no knowledge of the real file system.
 Another advantage of this concept is that it can be simply adjusted to
 different operation systems or file system environments.
\end_layout

\begin_layout Standard
To display this virtual file system to the user, I programed a file browser
 which is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Filebrowser"

\end_inset

.
 The file browser gives the user the possibility to organize his files on
 the server.
 It is even possible to download or upload a Python script.
 The maximum size of a file to be uploaded can be restricted.
 If a group of users likes to work with the same data set, the file system
 differs between a user specific folder (
\family typewriter
\size footnotesize
'user/'
\family default
\size default
) and an additional global read only folder (
\family typewriter
\size footnotesize
'global/'
\family default
\size default
) which is visible to all other users as well.
 For editing, the user can copy files with the file importer from the global
 folder to his own.
 The implementation is also flexible for adoption to add files from other
 designated import directories.
 The file importer is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Importer"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/filebrowser.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The File Browser
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Filebrowser"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/importer.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Implementation of the file importer
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Importer"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The files can be chosen from the left via the 'add' button and are then
 automatically been copied in sequence by pushing the 'start import' button.
\end_layout

\begin_layout Section
The Data Browser
\end_layout

\begin_layout Standard
In a similar manner like VISPA, I also used the 
\family typewriter
\size footnotesize
pxl::AutoLayouter
\family default
\size default
 to display decay trees in a data browser as in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Event-view"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/data browser.eps
	lyxscale 50
	scale 44

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Client's data browser for event viewing
\begin_inset CommandInset label
LatexCommand label
name "fig:Event-view"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the left side is an overview of all event views and all contained particles
 of the current event.
 Above it, the index of the current event in the file is displayed.
 It is possible to navigate forward or backward to display the next or previous
 event.
 The right panel displays the properties and user records of the selected
 particle, event view or of the whole event.
 The shown information is actually the array of name and value pairs of
 the 
\family typewriter
\size footnotesize
PxlIOReader
\family default
\size default
 class interchange format.
\end_layout

\begin_layout Standard
To draw the decay lines, the Java Script 'VectorGraphics' library was used.
 I also implemented a lightweight server side 
\family typewriter
\size footnotesize
ParticleLine
\family default
\size default
 class to use the 
\family typewriter
\size footnotesize
pxl::AutoLayouter
\family default
\size default
.
 If a particle has no mother and daughter relations, the line of the particle
 is adjusted horizontally and in sequence to other particle lines as in
 the 'Reconstructed' event view in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Event-view"

\end_inset

.
\end_layout

\begin_layout Standard
After the 
\family typewriter
\size footnotesize
pxl::AutoLayouter
\family default
\size default
 has been executed, the positions of the decay lines are included in the
 
\family typewriter
\size footnotesize
PxlIOReader
\family default
\size default
 format as well and transmitted along with the other data of the event to
 the client.
\end_layout

\begin_layout Section
The Code Editor
\end_layout

\begin_layout Standard
Unlike VISPA, the user can edit Python scripts directly inside the web browser.
 The code editor, 'EditArea'
\begin_inset CommandInset citation
LatexCommand cite
key "EditArea"

\end_inset

, was therefore integrated into the GUI.
 It supports syntax highlighting and interacts with the file browser to
 open or save a file.
 It is also possible to undo a modification or change the font size of the
 displayed code.
 It is left to the user, if he likes to use this feature or downloads the
 Python scripts and edits them with his own editor.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-code-editor:"

\end_inset

 visualizes the integration of the editor inside the 'Ext JS' layout.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/editor.png
	lyxscale 50
	scale 52

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The code editor: EditArea
\begin_inset CommandInset label
LatexCommand label
name "fig:The-code-editor:"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To summarize, the main layout and handling of VISPA could well be transferred
 into a web browser.
 It was even possible to adopt complex features like the data browser.
 In addition, for working with the server's file system, a file browser
 and file importer was designed and implemented.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifnum
\backslash
value{chapter}<1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "amsplain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fi
\end_layout

\end_inset


\end_layout

\end_body
\end_document
