#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrreprt
\begin_preamble
\usepackage{url}
\end_preamble
\use_default_options false
\language american
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 0.5cm
\footskip 0.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
The Web-Server
\end_layout

\begin_layout Standard
The main part of the program is the web-server.
 It's implementation requires to receive and process any incoming GET or
 POST request from possible clients simultaneously.
 A first step to do this is to identify active clients and match them with
 their physics analysis, if they submit requests.
 This is done by a server-side generated session id.
 Once a client sends a creation request for a new analysis to the server,
 it will receive and use this id for all further requests.
 Each other incoming request have to send these id along with the request
 data to modify the correct analysis.
 Thus, in this context, the physics analysis will be also designated as
 a session.
 An example of a request maybe the following:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
{
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
request:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset Quotes eld
\end_inset

saveAnalysis
\begin_inset Quotes erd
\end_inset

,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
filepath:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset Quotes eld
\end_inset

user/ttbar.xml
\begin_inset Quotes erd
\end_inset

,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
session:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\begin_inset Quotes eld
\end_inset

8ad2bf6754dfe153...
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size footnotesize
}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The session id is actual a SHA256 hash of the time-stamp at the generation
 time plus a random number.
 During the implementation, an easy exchange of the id generation was maintained.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Request-management-between"

\end_inset

 visualizes the data-flow and processing of a request on the server and
 client side.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/requests.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Request management between client and web-server
\begin_inset CommandInset label
LatexCommand label
name "fig:Request-management-between"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
First, the incoming request will be examined whether the content-type is
 specified as 
\end_layout

\begin_layout Standard

\family typewriter
\size small
application/x-www-form-urlencoded
\family default
\size default
,
\end_layout

\begin_layout Standard
which is the common signature of a JSON request.
 In this case the server extracts the JSON object's key and value pairs.
 To find the clients analysis session, the sent id will be used.
 If the analysis session can not be found, an exception will be raised.
 In the other case, the web-server delegates the processing of the request
 to appropriate methods.
 They will take care of all necessary actions and send the result data back
 to the client.
 At the above example, the pxl::Analysis will be called to save itself to
 the specified file path 
\family typewriter
\size footnotesize
'user/ttbar.xml'
\family default
\size default
.
 For the exception handling between the client and web-server, the server
 can send an error message back to the client.
 This message is also passed to the onSuccess method of the client by the
 AJAX engine and has to be distinguishable from successfully returned result
 data by formatting them differently.
 
\end_layout

\begin_layout Standard
The AJAX engine will call the onFailure method, if the POST request has
 not reached the server or no response has been send in the timeout.
 This may happen for example, if the connection between them is abruptly
 lost.
 So, in fact, the client has to manage two different levels of exception
 handing.
 
\end_layout

\begin_layout Standard
As stated, every client needs a valid id to get a request processed.
 Therefore, I like to elaborate what exactly happens to new clients at the
 first call of the server address (URL) and how they get an id with an associate
d session to start their physics analysis.
 A major requirement was to implement different starts to a guest and a
 registered user for security reasons.
 The flow chart in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Client:-Getting-an"

\end_inset

 demonstrates the chosen concept.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/startup.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Client: Getting an id
\begin_inset CommandInset label
LatexCommand label
name "fig:Client:-Getting-an"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At first a log-in with a user-name password pair is required to distinguish
 between the two user types.
 A guest needs no password and receives after the successfully returned
 log-in request his session id.
 If a user is registered and enters his user-name and password it will be
 check and send to the server.
 If the user has logged-in before the response of the server includes all
 of his previous saved XML analysis files.
 Then he has the freedom to create a new analysis or to load and work further
 on an existing one.
 In both cases, the server will send a session id back as well.
 For security reason, the password is not transmitted in a plain form.
 At the start, the client will save the current time-stamp.
 The entered password will be concatenated to the time-stamp and a SHA256
 hash is calculated.
 The server will receive both, hash and time-stamp, and can then easily
 generate and compare the stored user password by computing the same hash.
\end_layout

\begin_layout Section
Session management
\end_layout

\begin_layout Standard
For working with many different sessions simultaneously a system is need
 that controls and organize sessions automatically.
 The concept for handling a single analysis was even present during the
 work with PXL 2.5.6.
 So the pxl::Analysis class was introduced and integrated during the development
 from PXL 2.5.6 through PXL 3.0.
 For more flexibility, I created the AnalysisSession class to wrap around
 some methods of the pxl::Analysis class and to manage more concepts like
 the session id or the file handling with the file-system.
\end_layout

\begin_layout Standard
It is convenient to introduce a pool where all active sessions are maintainable.
 In this context I distinguish between an active and a dead session.
 All sessions have a time-stamp of their last modification.
 To save memory and prevent the lost of data if the program crashes, sessions
 can be saved to disk and removed from the session pool if they are not
 modified during a specified time period.
 These sessions are therefore designated as dead.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Communication-between-Session"

\end_inset

 demonstrates the interaction of the pool and the session class.
 For clarity, methods which are supporting modifications like the creation
 of new modules for the pxl::Analysis object are left out in this diagram.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/sessionmanagement.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Interaction between SessionPool and AnalysisSession
\begin_inset CommandInset label
LatexCommand label
name "fig:Communication-between-Session"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The session pool manages mainly the creation of new sessions.
 It can create an empty session or generate a session from a XML file.
 If a session is requested by the getAnalysis method, its time-stamp will
 be updated and moved to the bottom of the analysisList.
 This has the effect that this list is automatically sorted by the time
 of inactivity.
 So, possible dead sessions can easily be found at the top.
\end_layout

\begin_layout Section
File handling
\end_layout

\begin_layout Standard
PXL provides its own data format with the extension 'pxlio'.
 The structure of a pxlio file is divided into chunks.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:PXLIO-file:-Possible"

\end_inset

 shows an example of a possible constitution for a pxlio file with two chunks.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/pxliofiles.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
PXLIO file: Possible internal structure
\begin_inset CommandInset label
LatexCommand label
name "fig:PXLIO-file:-Possible"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In a pxlio file, there exists no global header which leaves the file readable
 even when the writing process was interrupted.
 Each chunk can consists of different data blocks with one or more serialized
 objects.
\end_layout

\begin_layout Standard
To access these information and send it back to the client in an easy parsable
 format, I introduced the PxlIOReader class.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-PxlIOReader"

\end_inset

 shows the current class structure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/pxlioreader.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The PxlIOReader
\begin_inset CommandInset label
LatexCommand label
name "fig:The-PxlIOReader"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The _readEvent() method will build the accessed information of the current
 pxl::Event at the index position together in the format which is shown
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-data-format"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/event_format.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The data format of the PxlIOReader class
\begin_inset CommandInset label
LatexCommand label
name "fig:The-data-format"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This format is highly flexible because particle properties are saved in
 pairs of the property name and its value.
 Therefore it can easily be adapt to more or less information to send.
 For example, if a pxl::Event includes over hundred pxl::Particles the user
 might not be interested in all information there is.
 The case of the minimum data is when all arrays of name and value pairs
 are empty.
\end_layout

\begin_layout Section
Job management
\end_layout

\begin_layout Standard
For performing parallel analysis, a multiprocessing job management is needed
 to prevent the web-server from crashing if an analysis breaks down.
 I created a job pool similar to the session pool.
 Every user can submit a pxl::Analysis to this pool for execution.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Multiprocessing-with-the"

\end_inset

 displays the complex submission and execution process.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/jobsystem.eps
	lyxscale 40
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Multiprocessing with the JobPool class
\begin_inset CommandInset label
LatexCommand label
name "fig:Multiprocessing-with-the"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The pool runs mainly in an own thread to control the maximal number of parallel
 working processes.
 Submitted jobs will be enqueued and wait for their execution.
 Every second the pool will look for new jobs in that list and execute them
 if the maximal number of parallel jobs allows this.
 Otherwise the jobs will remain in that list until a already running job
 has finished.
 It is convenient to set the number of the allowed parallel running jobs
 near to the server's CPU count.
\end_layout

\begin_layout Standard
To prevent data lost if a user submits a job during the pool is accessing
 the list, a lock is introduced.
 If the user or the pool access the list, it aquires the lock.
 If the other tries to aquire the lock as well, it has to wait until the
 lock is released.
\end_layout

\begin_layout Standard
The output of a job can easily be caught by using the new logging mechanism
 of PXL 3.0.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Logging-system"

\end_inset

 demonstrates this new feature and how it works.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename pics/logging.eps
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption

\begin_layout Plain Layout
The Logging system of PXL
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Logging-system"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To send a log entry, a pxl::Logger object has to be initialized with the
 module's name to log it.
 The pxl::Logger can be called with a specific log level and the message
 to log.
 The message should be divided by comma and do not consists of concatenated
 strings/values.
 The global pxl::LogDispatcher will only concatenate and distributed an
 incoming message to all registered pxl::LogHandler up to the highest set
 log level.
 This concept of logging provides a significant gain in performance because
 only the necessary concatenation operations are actual executed.
\end_layout

\begin_layout Standard
I created the HTMLLogHandler class for catching the output and displaying
 it to the user.
 The class inherits from the pxl::LogHandler and is registered to the pxl::LogDi
spatcher.
 It generates a HTML site from the incoming logging messages and displays
 it color-coded by the log level.
 To distinguish between the logging of different users, the pxl::LogDispatcher
 exists for each job process separately.
 This was also a reason for the implementation of a multiprocessing against
 a multithreading job management.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifnum
\backslash
value{chapter}<1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fi
\end_layout

\end_inset


\end_layout

\end_body
\end_document
